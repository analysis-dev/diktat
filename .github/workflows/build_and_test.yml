name: Build and test

on:
  pull_request

jobs:
  build_and_test_with_code_coverage:
    name: Build, test and upload code coverage
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v2.4.0
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-build-
      - name: Maven Install
        run: mvn -B clean install
      - name: Code coverage report
        uses: codecov/codecov-action@v2
        with:
          files: '**/target/site/jacoco*/jacoco.xml,**/reports/jacoco/**/*.xml'
          flags: unittests
          fail_ci_if_error: true # optional (default = false)
      - name: Upload diktat jar
        uses: actions/upload-artifact@v2
        with:
          name: diktat-ruleset
          path: diktat-ruleset/target/diktat-*.jar
          # no need to store artifact longer, it is used only by dependant jobs
          retention-days: 1
      - name: Upload gradle reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: gradle-test-report-${{ runner.os }}
          path: 'diktat-gradle-plugin/build/reports/'
          retention-days: 1

  run_diktat_from_CLI:
    name: Run diktat via CLI
    runs-on: ${{ matrix.os }}
    needs: build_and_test_with_code_coverage
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v2.4.0
      - name: Setup environment variables
        run: |
          cat pom.xml | grep "<version>.*</version>" | head -1 | awk -F'[><]' '{ printf "DIKTAT_VERSION=%s\n",$3 }' >> $GITHUB_ENV
          cat pom.xml | grep "<ktlint.version>.*</ktlint.version>" | head -1 | awk -F'[><]' '{ printf "KTLINT_VERSION=%s\n",$3 }' >> $GITHUB_ENV
        shell: bash

      - name: Setup environment
        run: |
          curl -o ktlint -sSL https://github.com/pinterest/ktlint/releases/download/${{ env.KTLINT_VERSION }}/ktlint && chmod a+x ktlint
          java -version
        shell: bash

      - name: Download diktat jar
        uses: actions/download-artifact@v2
        with:
          name: diktat-ruleset

      - name: Run diKTat from cli
        continue-on-error: true
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: |
          java -jar ktlint -R diktat-${{ env.DIKTAT_VERSION }}.jar --disabled_rules=standard "examples/maven/src/main/kotlin/Test.kt" &> out.txt
        shell: bash

      - name: Run diKTat from cli on windows
        continue-on-error: true
        if: runner.os == 'Windows'
        run: |
          java.exe -jar ktlint -R diktat-${{ env.DIKTAT_VERSION }}.jar --disabled_rules=standard "examples/maven/src/main/kotlin/Test.kt" > out.txt 2>&1
        shell: cmd

      - name: Check output
        run: |
          cat out.txt
          grep -E "\[VARIABLE_NAME_INCORRECT_FORMAT\]" out.txt
          rm out.txt
        shell: bash

      - name: Run diKTat from cli (absolute paths)
        continue-on-error: true
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: |
          java -jar ktlint -R diktat-${{ env.DIKTAT_VERSION }}.jar --disabled_rules=standard "$PWD/examples/maven/src/main/kotlin/Test.kt" &> out.txt
        shell: bash

      - name: Run diKTat from cli on windows (absolute paths)
        continue-on-error: true
        if: runner.os == 'Windows'
        run: |
          java.exe -jar ktlint -R diktat-${{ env.DIKTAT_VERSION }}.jar --disabled_rules=standard "%cd%/examples/maven/src/main/kotlin/Test.kt" > out.txt 2>&1
        shell: cmd

      - name: Check output (absolute paths)
        run: |
          cat out.txt
          grep -E "\[VARIABLE_NAME_INCORRECT_FORMAT\]" out.txt
        shell: bash

  build_and_test:
    name: Build and test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v2.4.0
      - name: Set up JDK 11
        uses: actions/setup-java@v2
        with:
          distribution: zulu
          java-version: 11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: maven-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            maven-build-

      - name: Maven Install
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: |
          mvn -B -T1C clean install
        shell: bash

      - name: Maven Install on windows
        if: runner.os == 'Windows'
        run: |
          mvn -B -T1C clean install
        shell: cmd

      - name: Upload gradle reports
        if: ${{ failure() }}
        uses: actions/upload-artifact@v2
        with:
          name: gradle-test-report-${{ matrix.os }}
          path: 'diktat-gradle-plugin/build/reports/'
          retention-days: 1
