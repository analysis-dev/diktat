name: Build and test

on:
  pull_request

jobs:
  build_and_test:
    name: Unit Test
    runs-on: ubuntu-18.04

    steps:
      # actions/checkout v1.* is needed for correct codecov upload, see github issues for details
      - uses: actions/checkout@v1
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-build-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-build-
      - name: Maven Package
        run: mvn -B clean package -DskipTests
      - name: Maven Install
        run: mvn -B install
      - name: Code coverage report
        uses: codecov/codecov-action@v1
        with:
          file: ./*/target/site/jacoco/jacoco.xml
          flags: unittests
          fail_ci_if_error: true # optional (default = false)
      - name: Upload diktat jar
        uses: actions/upload-artifact@v2
        with:
          name: diktat-ruleset
          path: diktat-ruleset/target/diktat-*.jar
          # no need to store artifact longer, it is used only by dependant jobs
          retention-days: 1
      - name: Deploy diktat snapshot to github packages
        run: mvn -B deploy -DskipTests=true -DaltDeploymentRepository=github::https://maven.pkg.github.com/cqfn/diktat
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # GITHUB_TOKEN is the default env for the password in settings.xml created by actions/setup-java

  run_diktat_from_CLI:
    runs-on: ${{ matrix.os }}
    needs: build_and_test
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]

    steps:
      - uses: actions/checkout@v2.3.3

      - name: Setup environment variables
        run: |
          cat pom.xml | grep "<version>.*</version>" | head -1 | awk -F'[><]' '{ printf "DIKTAT_VERSION=%s\n",$3 }' >> $GITHUB_ENV
          cat pom.xml | grep "<ktlint.version>.*</ktlint.version>" | head -1 | awk -F'[><]' '{ printf "KTLINT_VERSION=%s\n",$3 }' >> $GITHUB_ENV
        shell: bash

      - name: Setup environment
        run: |
          curl -sSLO https://github.com/pinterest/ktlint/releases/download/${{ env.KTLINT_VERSION }}/ktlint && chmod a+x ktlint
        shell: bash

      - name: Download diktat jar
        uses: actions/download-artifact@v2
        with:
          name: diktat-ruleset

      - name: Run diKTat from cli
        continue-on-error: true
        if: ${{ runner.os == 'Linux' || runner.os == 'macOS' }}
        run: |
          ./ktlint -R diktat-${{ env.DIKTAT_VERSION }}.jar "examples/maven/src/main/kotlin/Test.kt" &> out
        shell: bash

      - name: Run diKTat from cli on windows
        continue-on-error: true
        if: runner.os == 'Windows'
        run: |
          java.exe -jar ktlint -R diktat-${{ env.DIKTAT_VERSION }}.jar "examples/maven/src/main/kotlin/Test.kt" > out.txt 2>&1
        shell: cmd

      - name: Check output
        id: cli-check
        run: |
          if [ -f out.txt ]; then mv out.txt out; fi
          cat out
          grep -E "\[VARIABLE_NAME_INCORRECT_FORMAT\]" out
        shell: bash

  run_diktat_from_maven:
    runs-on: ${{ matrix.os }}
#    needs: build_and_test
    strategy:
      matrix:
        os: [ ubuntu-latest, windows-latest, macos-latest ]
    steps:
      - uses: actions/checkout@v2.3.3
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11

      - name: Download artifacts for diktat snapshot
        run: |
          DIKTAT_VERSION=$(printf 'VERSION=${project.version}\n0\n' | mvn help:evaluate | grep '^VERSION' | cut -d= -f2)
          echo DIKTAT_VERSION=$DIKTAT_VERSION >> $GITHUB_ENV
          mvn -B dependency:get -Dartifact=org.cqfn.diktat:diktat-maven-plugin:$DIKTAT_VERSION:jar -Pgithub
        shell: bash
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Run diKTat from maven
        working-directory: ./examples/maven
        continue-on-error: true
        run: |
          mvn versions:set-property -Dproperty=diktat.version -DnewVersion=${{ env.DIKTAT_VERSION }}
          mvn -B -nsu diktat:check &> out
        shell: bash

      - name: Check maven
        working-directory: ./examples/maven
        run: |
          cat out
          grep -E "\[VARIABLE_NAME_INCORRECT_FORMAT\]" out
        shell: bash
