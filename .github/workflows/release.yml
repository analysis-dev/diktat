name: Create diKTat release

on:
  push:
    tags:
      - 'v*'

jobs:
  build:
    name: Build release
    runs-on: ubuntu-20.04

    steps:
      - name: Checkout
        uses: actions/checkout@v2.3.3
      - name: Set up JDK 11
        uses: actions/setup-java@v1
        with:
          java-version: 1.11
      - name: Cache local Maven repository
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: ${{ runner.os }}-maven-master-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-master-
      - name: Setup environment
        env:
          DIKTAT_GPG_PUB: ${{ secrets.DIKTAT_PGP_PUB }}
          DIKTAT_GPG_SEC: ${{ secrets.DIKTAT_PGP_SEC }}
        # Note: maven-help-plugin requires non-interactive mode (do not add -B flag).
        run: |
          previous_version=$(printf 'VERSION=${diktat-check.version}\n0\n' | mvn help:evaluate | grep '^VERSION' | cut -d= -f2)
          echo "PREVIOUS_VERSION=$previous_version" >> $GITHUB_ENV
          echo "RELEASE_VERSION=${GITHUB_REF#'refs/tags/v'}" >> $GITHUB_ENV
          echo "$DIKTAT_GPG_PUB" > ~/diktat.pubring.gpg
          echo "$DIKTAT_GPG_SEC" > ~/diktat.secring.gpg
          gpg --import ~/diktat.pubring.gpg
          gpg --batch --import ~/diktat.secring.gpg  # --batch suppresses intercatively asking passphrase
      - name: Set version
        run: mvn -B versions:set -DnewVersion=${{ env.RELEASE_VERSION }} versions:commit
      - name: Create settings.xml
        uses: whelk-io/maven-settings-xml-action@v14
        with:
          servers: '[{ "id": "ossrh", "username": "${{ secrets.SONATYPE_USER }}", "password": "${{ secrets.SONATYPE_PASSWORD }}" }, { "id": "gpg.passphrase", "passphrase": "${{ secrets.DIKTAT_GPG_PASS }}" }]'
      - name: Deploy artifacts
        run: mvn -B clean deploy -Prelease --projects '!diktat-ruleset'
      - name: Build diktat.jar
        run: mvn -B package --projects diktat-ruleset
      - name: Create Github Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ env.RELEASE_VERSION }}
          draft: false
          prerelease: false
      - name: Upload assets to github releases
        id: upload-release-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./diktat-ruleset/target/diktat-${{ env.RELEASE_VERSION }}.jar
          asset_name: diktat-${{ env.RELEASE_VERSION }}.jar
          asset_content_type: application/zip
      - name: Update versions in pom.xml and documentation, update examples
        id: update-versions
        run: |
          mvn -B versions:set -DnextSnapshot=true -DprocessAllModules=true versions:commit
          mvn versions:set-property -Dproperty=diktat-check.version -DnewVersion=${{ env.RELEASE_VERSION }}
          sed -i "s/$PREVIOUS_VERSION/$RELEASE_VERSION/g" README.md || echo "File README.md hasn't been updated!"
          for file in examples/maven/pom.xml examples/gradle-groovy-dsl/build.gradle examples/gradle-kotlin-dsl/build.gradle.kts
          do
            sed -i "s/$PREVIOUS_VERSION/$RELEASE_VERSION/g" $file || echo "File $file hasn't been updated!"
            cp diktat-rules/src/main/resources/diktat-analysis.yml $(dirname $file)
          done
          next_snapshot_version=$(printf 'VERSION=${project.version}\n0\n' | mvn help:evaluate | grep '^VERSION' | cut -d= -f2)
          echo "version=$next_snapshot_version" > info/buildSrc/gradle.properties
      - name: Create pull request
        uses: peter-evans/create-pull-request@v3
        with:
          author: GitHub <noreply@github.com>
          commit-message: Prepare next development iteration after release ${{ env.RELEASE_VERSION }}
          branch: infra/diktat-version-update-to-${{ env.RELEASE_VERSION }}
          title: Update versions in pom.xml and documentation after ${{ env.RELEASE_VERSION }} release
          body: |
            * Versions are updated in pom.xml, README.md and in examples
            * Current project version is incremented to the next snapshot
          base: master
